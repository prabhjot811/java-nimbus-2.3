import java.util.*;
import java.util.stream.*;
import java.util.Map.Entry;

class Product {
    private String name;
    private double price;
    private String category;

    // Constructor
    public Product(String name, double price, String category) {
        this.name = name;
        this.price = price;
        this.category = category;
    }

    // Getters
    public String getName() { return name; }
    public double getPrice() { return price; }
    public String getCategory() { return category; }

    @Override
    public String toString() {
        return String.format("%s (%.2f, %s)", name, price, category);
    }
}

public class ProductStreamOperations {
    public static void main(String[] args) {
        // Create a sample product dataset
        List<Product> products = Arrays.asList(
            new Product("Laptop", 1200.0, "Electronics"),
            new Product("Smartphone", 800.0, "Electronics"),
            new Product("Headphones", 150.0, "Electronics"),
            new Product("Shirt", 40.0, "Clothing"),
            new Product("Jeans", 60.0, "Clothing"),
            new Product("Jacket", 120.0, "Clothing"),
            new Product("Apples", 3.0, "Groceries"),
            new Product("Milk", 2.5, "Groceries"),
            new Product("Cheese", 5.0, "Groceries"),
            new Product("TV", 900.0, "Electronics")
        );

        // 1️⃣ Group products by category
        System.out.println("===== Products Grouped by Category =====");
        Map<String, List<Product>> productsByCategory = products.stream()
                .collect(Collectors.groupingBy(Product::getCategory));

        productsByCategory.forEach((category, productList) -> {
            System.out.println("\nCategory: " + category);
            productList.forEach(p -> System.out.println(" - " + p));
        });

        // 2️⃣ Find the most expensive product in each category
        System.out.println("\n===== Most Expensive Product in Each Category =====");
        Map<String, Optional<Product>> maxPriceByCategory = products.stream()
                .collect(Collectors.groupingBy(
                        Product::getCategory,
                        Collectors.maxBy(Comparator.comparingDouble(Product::getPrice))
                ));

        for (Entry<String, Optional<Product>> entry : maxPriceByCategory.entrySet()) {
            entry.getValue().ifPresent(product -> 
                System.out.println("Category: " + entry.getKey() + " → " + product)
            );
        }

        // 3️⃣ Calculate average price of all products
        double averagePrice = products.stream()
                .collect(Collectors.averagingDouble(Product::getPrice));

        System.out.printf("%n===== Average Price of All Products: %.2f =====%n", averagePrice);
    }
}
